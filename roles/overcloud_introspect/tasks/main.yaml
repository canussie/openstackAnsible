---
#
# get mac of controller
#
- name: get mac compute node
  shell: sudo virsh dumpxml overcloud-compute1 |grep "mac address" |cut -d= -f2|cut -d\' -f2
  register: mac_comp
  delegate_to: 127.0.0.1
- name: get mac controller node
  shell: sudo virsh dumpxml overcloud-controller |grep "mac address" |cut -d= -f2|cut -d\' -f2
  register: mac_cont
  delegate_to: 127.0.0.1
# pub key
- name: get pub
  shell: cat ~/.ssh/id_rsa.pub
  register: pub_key
# ssh key for stack user
- name: gen ssh key
#  shell: cat ~/.ssh/id_rsa
  shell: cat ~/.ssh/id_rsa |tr -d '\n' | sed 's/-----BEGIN RSA PRIVATE KEY-----/-----BEGIN RSA PRIVATE KEY-----\\n/'| sed 's/-----END RSA PRIVATE KEY-----/\\n-----END RSA PRIVATE KEY-----/'
  register: user_res
- name: get priv key
  set_fact: 
    ssh_key: "{{ user_res.stdout }}"
- name: get pub key
  authorized_key:
    user: stack
    state: present
    key: "{{ pub_key.stdout }}"
  delegate_to: 127.0.0.1
- name: set mac fact for controller
  set_fact:
    controller_mac: "{{ mac_cont.stdout }}"
- name: set mac fact for compute
  set_fact:
    compute_mac: "{{ mac_comp.stdout }}"
- name: ironic template
  template:
    src: ironic.j2
    dest: /home/stack/ironic.json
# check if import json exists
- name: check if instackenv.json exists
  stat:
    path: /home/stack/instackenv.json
  register: instack_json
# create the file if not exist
- name: create json import
  shell: cat /home/stack/ironic.json | jq . > /home/stack/instackenv.json
  when: instack_json.stat.exists == False
